version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.2
  aws_assume_role: lbh-hackit/aws_assume_role@0.1.0

executors:
  docker-python:
    docker:
      - image: circleci/python:3.7
  docker-terraform:
    docker:
      - image: "hashicorp/terraform:light"
  docker-dotnet:
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:3.1

references:
  workspace_root: &workspace_root "~"
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

commands:
  assume-role-and-persist-workspace:
    description: "Assumes deployment role and persists credentials across jobs"
    parameters:
      aws-account:
        type: string
    steps:
      - checkout
      - aws_assume_role/assume_role:
          account: <<parameters.aws-account>>
          profile_name: default
          role: "LBH_Circle_CI_Deployment_Role"
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .aws
#  terraform-init-then-apply:
#    description: "Initializes and applies terraform configuration"
#    parameters:
#      environment_name:
#        type: string
#      ecs_cluster_name:
#        type: string
#      ecr_repo_name:
#        type: string
#    steps:
#      - *attach_workspace
#      - checkout
#      - run:
#          command: |
#            cd ./terraform/<<parameters.environment_name>>/
#            terraform get -update=true
#            terraform init
#          name: get and init
#      - run:
#          name: apply
#          command: |
#            export TF_VAR_environment_name=<<parameters.environment_name>>
#            export TF_VAR_ecs_cluster_name=<<parameters.ecs_cluster_name>>
#            export TF_VAR_ecr_repo_name=<<parameters.ecr_repo_name>>
#            cd ./terraform/<<parameters.environment_name>>/
#            terraform apply -auto-approve
  deploy-lambda:
    description: "Deploys API via Serverless"
    parameters:
      stage:
        type: string
      aws-account:
        type: string
    steps:
      - *attach_workspace
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - setup_remote_docker
      - run:
          name: Install Node.js
          command: |
            curl -sL https://deb.nodesource.com/setup_13.x | bash -
            apt-get update && apt-get install -y nodejs
      - run:
          name: Install serverless CLI
          command: npm i -g serverless
#      - run:
#          name: Build lambda
#          command: |
#            cd ./DynamoDBIndexing/
#            chmod +x ./build.sh
#            ./build.sh
      - run:
          name: Deploy lambda
          command: |
            cd ./mtfh-interim-sheets-sync/
            sls deploy --stage <<parameters.stage>> --account <<parameters.aws-account>> --conceal

jobs:
#  check-code-formatting:
#    executor: docker-dotnet
#    steps:
#      - checkout
#      - run:
#          name: Install dotnet format
#          command: dotnet tool install dotnet-format --tool-path ./dotnet-format-local/
#      - run:
#          name: Run formatter check
#          command: ./dotnet-format-local/dotnet-format --check
  assume-role-development:
    executor: docker-python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_DEVELOPMENT
  assume-role-staging:
    executor: docker-python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_STAGING
  assume-role-production:
    executor: docker-python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_PRODUCTION
#  terraform-init-and-apply-to-development:
#    executor: docker-terraform
#    steps:
#      - terraform-init-then-apply:
#          environment_name: "development"
#          ecs_cluster_name: $ECS_CLUSTER_NAME
#          ecr_repo_name: "mtfh-dynamodb-elasticsearch-indexing-development"
#  terraform-init-and-apply-to-staging:
#    executor: docker-terraform
#    steps:
#      - terraform-init-then-apply:
#          environment_name: "staging"
#          ecs_cluster_name: $ECS_CLUSTER_NAME
#          ecr_repo_name: "mtfh-dynamodb-elasticsearch-indexing-staging"
#  terraform-init-and-apply-to-production:
#    executor: docker-terraform
#    steps:
#      - terraform-init-then-apply:
#          environment_name: "production"
#          ecs_cluster_name: $ECS_CLUSTER_NAME
#          ecr_repo_name: "mtfh-dynamodb-elasticsearch-indexing-production"
  deploy-to-development:
    executor: docker-dotnet
    steps:
      - deploy-lambda:
          stage: "development"
          aws-account: $AWS_ACCOUNT_DEVELOPMENT
  deploy-to-staging:
    executor: docker-dotnet
    steps:
      - deploy-lambda:
          stage: "staging"
          aws-account: $AWS_ACCOUNT_STAGING
  deploy-to-production:
    executor: docker-dotnet
    steps:
      - deploy-lambda:
          stage: "production"
          aws-account: $AWS_ACCOUNT_PRODUCTION

workflows:
  check-and-deploy-development:
    jobs:
#      - check-code-formatting
      - assume-role-development:
          context: api-assume-role-housing-development-context
#          requires:
#            - check-code-formatting
#          filters:
#            branches:
#              only: master
#      - terraform-init-and-apply-to-development:
#          requires:
#            - assume-role-development
#          filters:
#            branches:
#              only: master
      - deploy-to-development:
          requires:
#            - terraform-init-and-apply-to-development
            - assume-role-development
#          filters:
#            branches:
#              only: master
#  check-and-deploy-staging-and-production:
#      jobs:
#      - check-code-formatting
#      - assume-role-staging:
#          context: api-assume-role-housing-staging-context
#          requires:
#            - check-code-formatting
#          filters:
#             branches:
#               only: release
#      - terraform-init-and-apply-to-staging:
#          requires:
#            - assume-role-staging
#          filters:
#            branches:
#              only: release
#      - deploy-to-staging:
#          requires:
#            - terraform-init-and-apply-to-staging
#          filters:
#            branches:
#              only: release
#      - permit-production-terraform-release:
#          type: approval
#          requires:
#            - deploy-to-staging
#      - assume-role-production:
#          context: api-assume-role-housing-production-context
#          requires:
#              - permit-production-terraform-release
#          filters:
#             branches:
#               only: release
#      - terraform-init-and-apply-to-production:
#          requires:
#            - assume-role-production
#          filters:
#            branches:
#              only: release
#      - permit-production-release:
#          type: approval
#          requires:
#            - deploy-to-staging
#            - terraform-init-and-apply-to-production
#          filters:
#            branches:
#              only: release
#      - deploy-to-production:
#          requires:
#            - permit-production-release
#            - terraform-init-and-apply-to-production
#          filters:
#            branches:
#              only: release
